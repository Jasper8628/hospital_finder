{"version":3,"sources":["utils/global.js","utils/API.js","pages/admin/admin.js","components/illnesses/illnesses.js","components/waittime/waitTime.js","components/hospitals/hospitals.js","components/googleMap/googleMaps.js","components/slider/slider.js","pages/home/home.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","Provider","reducer","state","action","type","painLevel","pain","openTab","tabName","mobileMap","destination","location","Error","ContextProvider","value","props","useReducer","globalState","dispatch","useAppContext","useContext","url","config","headers","header1","API","getUsers","axios","get","deleteUser","data","delete","postUser","console","log","post","Admin","useState","users","setUsers","useEffect","then","res","forEach","element","_ref","_path","segments","catch","err","event","id","target","name","className","length","map","user","index","_fieldsProto","stringValue","age","gender","JSON","parse","illnesses","symptom","onClick","Illnesses","ills","setIlls","page","setPage","formData","setFormdata","global","process","_embedded","handlePage","e","getAttribute","handleChange","selectIllness","ill","illness","placeholder","onChange","Object","keys","key","push","stringify","body","setTimeout","WaitTime","hospital","waitingList","waitTime","patientCount","averageProcessTime","Math","round","Hospitals","hospitals","setHospitals","waitList","result","sortedHospitals","concat","sort","a","b","handleClick","windowSize","window","innerWidth","direction","lat","parseFloat","lng","classList","calDistance","x","y","sqrt","data-lat","data-lng","api","Geocode","setApiKey","enableDebug","GoogleMaps","directions","setDirection","mapPosition","setMapPosition","directionsService","google","maps","DirectionsService","loadGeo","loadHospitals","origin","route","travelMode","TravelMode","DRIVING","status","DirectionsStatus","OK","error","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fromLatLng","msg","alert","maximumAge","timeout","enableHighAccuracy","onMarkerDragEnd","newLat","latLng","newLng","Map","memo","selectedHospital","setSelectedHospital","defaultZoom","defaultCenter","defaultOptions","disableDefaultUI","controlSize","draggable","onDragEnd","options","strokeColor","onCloseClick","WrappedMap","withScriptjs","withGoogleMap","googleMapURL","loadingElement","style","containerElement","mapElement","Slider","min","max","parseInt","Home","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ff0fb2e.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\r\nconst AppContext = createContext();\r\nconst { Provider } = AppContext;\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'pain':\r\n      return {\r\n        ...state,\r\n        painLevel: action.pain\r\n      }\r\n    case 'switchTab':\r\n      return {\r\n        ...state,\r\n        openTab: action.tabName,\r\n      }\r\n    case 'closeMap':\r\n      return {\r\n        ...state,\r\n        mobileMap: false\r\n      }\r\n    case 'direction':\r\n      return {\r\n        ...state,\r\n        destination: action.destination,\r\n        mobileMap: action.mobileMap,\r\n      }\r\n    case 'location':\r\n      return {\r\n        ...state,\r\n        location: action.location\r\n      }\r\n    default:\r\n      throw new Error(`Invalid action type: ${action.type}`)\r\n  }\r\n};\r\n\r\nconst ContextProvider = ({ value = 0, ...props }) => {\r\n  const [globalState, dispatch] = useReducer(\r\n    reducer, {\r\n    painLevel: 0,\r\n    openTab: 'hospital',\r\n    mobileMap: false,\r\n    destination: {},\r\n    location: {},\r\n  });\r\n  return <Provider value={[globalState, dispatch]} {...props} />;\r\n};\r\nconst useAppContext = () => {\r\n  return useContext(AppContext);\r\n};\r\nexport { ContextProvider, useAppContext };\r\n","import axios from 'axios';\r\nconst url = 'https://australia-southeast1-hospital-finder-4a002.cloudfunctions.net/';\r\nconst url2 = 'http://localhost:5001/hospital-finder-4a002/australia-southeast1/deletePatient'\r\nlet config = {\r\n  headers: {\r\n    header1: 'Access-Control-Allow-Origin',\r\n  }\r\n}\r\nconst API = {\r\n  getUsers: function () {\r\n    return axios.get(url + 'getPatients', config);\r\n  },\r\n  deleteUser: function (data) {\r\n    // return axios.delete(url2, data, config);\r\n    return axios.delete(url + 'deletePatient', data, config);\r\n  },\r\n  postUser: function (data) {\r\n    console.log(data);\r\n    return axios.post(url + 'addPatient', data, config);\r\n  },\r\n}\r\nexport default API","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport './admin.css'\r\nfunction Admin() {\r\n  const [users, setUsers] = useState([]);\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, []);\r\n\r\n  const getUsers = () => {\r\n    API.getUsers()\r\n      .then(res => {\r\n        const users = res.data.data\r\n        // console.log('logging res: ', res.data.data)\r\n        users.forEach(element => {\r\n          console.log(element._ref._path.segments[1])\r\n\r\n        });\r\n\r\n        setUsers(users);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  const deleteUser = (event) => {\r\n    const data = {\r\n      id: event.target.name\r\n    };\r\n    // console.log(id)\r\n    API.deleteUser({ data })\r\n      .then(res => {\r\n        console.log(res)\r\n        getUsers();\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n  return (\r\n\r\n    <div className='admin-container' >\r\n      {users.length ? (\r\n        <div className='patient-container' >\r\n          {users.map((user, index) => (\r\n            <div className='patient-card' key={index}>\r\n              <div className='patient-header'>\r\n                <h2>{user._fieldsProto.name ? user._fieldsProto.name.stringValue : 'name: n/a'}</h2>\r\n                <p>{user._fieldsProto.age ? user._fieldsProto.age.stringValue : 'age: n/a'}</p>\r\n                <p>{user._fieldsProto.gender ? user._fieldsProto.gender.stringValue : 'gender: n/a'}</p>\r\n              </div>\r\n              <div className='patient-body'>\r\n                <ul>\r\n                  <h4>Symptoms</h4>\r\n                  {JSON.parse(user._fieldsProto.illnesses.stringValue).length ?\r\n                    JSON.parse(user._fieldsProto.illnesses.stringValue).map((symptom, index) => (\r\n                      <li key={index} >{symptom}</li>\r\n                    )) : 'no symptoms reported'}\r\n                </ul>\r\n                <div className='bottom-container'>\r\n                  <button\r\n                    name={user._ref._path.segments[1]}\r\n                    onClick={deleteUser}>\r\n                    <span className='fas fa-trash-alt' />\r\n                  </button>\r\n\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n        </div>\r\n      ) : (\r\n        <div>No users in the database</div>\r\n      )}\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Admin\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAppContext } from '../../utils/global';\r\nimport axios from 'axios';\r\nimport API from '../../utils/API'\r\n\r\nfunction Illnesses() {\r\n  const url = process.env.REACT_APP_ILLNESSES_URL;\r\n  const [ills, setIlls] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [formData, setFormdata] = useState({});\r\n  const [global, dispatch] = useAppContext();\r\n\r\n  useEffect(() => {\r\n    // allowing \"next\" button to navigate to Form without querying non-existent pages\r\n    axios.get(`${url}&page=${page > 1 ? 1 : page}`)\r\n      .then(res => {\r\n        setIlls(res.data._embedded.illnesses)\r\n      })\r\n  }, [page]);\r\n\r\n  const handlePage = (e) => {\r\n    const name = e.target.getAttribute('name');\r\n    setPage(name === 'back' ? page - 1 : page + 1)\r\n  }\r\n  const handleTab = (e) => {\r\n    const name = e.target.getAttribute('name');\r\n    dispatch({\r\n      type: 'switchTab',\r\n      tabName: global.openTab === name ? 'hospital' : name\r\n    });\r\n  }\r\n  const handleSubmit = () => {\r\n    const illnesses = [];\r\n    const keys = Object.keys(formData);\r\n    keys.forEach(key => {\r\n      if (formData[key] === true) illnesses.push(key);\r\n    });\r\n    const data = formData;\r\n    // collecting all selected illnesses in an array without having to worry about deleting any when unselected\r\n    data.illnesses = JSON.stringify(illnesses)\r\n    console.log('logging data: ', data);\r\n    API.postUser({ body: data })\r\n      .then(res => { console.log(res) })\r\n      .catch(err => console.log(err));\r\n    setTimeout(() => {\r\n      dispatch({ type: 'switchTab', tabName: 'hospital' });\r\n    }, 800);\r\n  }\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    console.log(name, value)\r\n    setFormdata({\r\n      ...formData,\r\n      [name]: value\r\n    })\r\n  }\r\n  const selectIllness = (e) => {\r\n    const name = e.target.getAttribute('name');\r\n    setFormdata({\r\n      ...formData,\r\n      [name]: formData[name] ? false : true,\r\n    })\r\n  }\r\n  return (\r\n    <div className={global.openTab === 'illness' ? 'accordian-container active' : 'accordian-container'} >\r\n      <div className='accordian-header' name='illness' onClick={handleTab}>\r\n        <h1>Record Symptoms</h1>\r\n      </div>\r\n      <div id='illnesses' className='accordian-body'>\r\n        <div className={page >= 2 ? 'illness-list-hide' : 'illness-list'}>\r\n          {ills.map((ill, index) =>\r\n            <button className='illness-button' key={index} name={ill.illness.name} onClick={selectIllness} >\r\n              {ill.illness.name}\r\n              <span className={formData[ill.illness.name] ? 'fas fa-circle' : 'far fa-circle'} />\r\n              {/* <input onChange={handleChange} type='range' name={ill.illness.name} value={formData[ill.illness.name]} min='1' max='5' /> */}\r\n            </button>\r\n          )}\r\n        </div>\r\n        <div className={page >= 2 ? 'illness-list' : 'illness-list-hide'}>\r\n          <input className='patient-input' placeholder='Full Name...' name='name' value={formData.name} onChange={handleChange} />\r\n          <input className='patient-input' placeholder='Age...' name='age' value={formData.age} onChange={handleChange} />\r\n          <select className='patient-input' name='gender' onChange={handleChange} >\r\n            <option name='n/a' value='n/a'>Gender...</option>\r\n            <option name='Female' value='Female'>Female</option>\r\n            <option name='Male' value='Male'>Male</option>\r\n            <option name='Other' value='Other'>Other</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className='button-container'>\r\n        <button className={page > 0 ? 'page-button' : 'page-button-hide'} onClick={handlePage} name='back'>Back</button>\r\n        <button className={page >= 2 ? 'page-button-hide' : 'page-button'} onClick={handlePage} name='next'>Next</button>\r\n        <button className={page >= 2 ? 'page-button' : 'page-button-hide'} onClick={handleSubmit} name='next'>Submit</button>\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Illnesses\r\n","import React from 'react'\r\nfunction WaitTime({ painLevel, hospital }) {\r\n  const { patientCount, averageProcessTime } = hospital.waitingList[painLevel];\r\n  const waitTime = patientCount * averageProcessTime;\r\n  return (\r\n    <span className='wait-time'>\r\n      { waitTime === 0 ?\r\n        `Wait time: ${waitTime}min` :\r\n        waitTime <= 60 ?\r\n          `Wait time: ${waitTime}mins` :\r\n          `Wait time: ${Math.round(waitTime / 6) / 10}hrs`}\r\n    </span>\r\n  )\r\n}\r\nexport default WaitTime","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport WaitTime from '../waittime/waitTime'\r\nimport { useAppContext } from '../../utils/global';\r\nimport './styles.css';\r\n\r\nfunction Hospitals() {\r\n  const url = process.env.REACT_APP_HOSPITALS_URL;\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [global, dispatch] = useAppContext();\r\n\r\n  useEffect(() => {\r\n    axios.get(url)\r\n      .then(res => {\r\n        const waitList = res.data._embedded.hospitals\r\n        axios.get(url + '&page=1')\r\n          .then(result => {\r\n            const sortedHospitals = waitList.concat(result.data._embedded.hospitals)\r\n              // sorting by calculated wait time based on the painLevel value in the global state\r\n              .sort((a, b) => {\r\n                return a.waitingList[global.painLevel].patientCount * a.waitingList[global.painLevel].averageProcessTime\r\n                  - b.waitingList[global.painLevel].patientCount * b.waitingList[global.painLevel].averageProcessTime\r\n              });\r\n            setHospitals(sortedHospitals)\r\n          })\r\n      });\r\n  }, [global.painLevel]);\r\n\r\n  const handleClick = (e) => {\r\n    const windowSize = window.innerWidth;\r\n    const direction = {\r\n      lat: parseFloat(e.target.getAttribute('data-lat')),\r\n      lng: parseFloat(e.target.getAttribute('data-lng')),\r\n    };\r\n    console.log('logging desination:', direction)\r\n    console.log('clicked: ', e.target.classList)\r\n    dispatch({\r\n      type: 'direction',\r\n      destination: direction,\r\n      mobileMap: windowSize <= 1000 ? true : false,\r\n    });\r\n  };\r\n\r\n  const handleTab = (e) => {\r\n    const name = e.target.getAttribute('name');\r\n    dispatch({\r\n      type: 'switchTab',\r\n      tabName: global.openTab === name ? 'illness' : name\r\n    });\r\n  }\r\n\r\n  const calDistance = (a, b) => {\r\n    const x = (a.lat - b.lat) * 111263.0566;\r\n    const y = (a.lng - b.lng) * 111263.0566;\r\n    const distance = Math.round(Math.sqrt(x * x + y * y) / 100) / 10;\r\n    return distance;\r\n\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={global.openTab === 'hospital' ? 'accordian-container active' : 'accordian-container'}>\r\n      <div className='accordian-header' onClick={handleTab} name='hospital'>\r\n        <h1>Suggested Hospitals</h1>\r\n        {/* <h3>{`pain level: ${global.painLevel}`}</h3> */}\r\n\r\n      </div>\r\n      <div className='accordian-body' >\r\n        {hospitals.map((hospital, index) =>\r\n          <button className='list-button' key={index} data-lat={hospital.location.lat} data-lng={hospital.location.lng} onClick={handleClick} >\r\n            <h3>{hospital.name}</h3>\r\n            <div className='note-container'>\r\n              <span>Distance: {calDistance(hospital.location, global.location)} kms</span>\r\n              <WaitTime painLevel={global.painLevel} hospital={hospital} />\r\n            </div>\r\n          </button>\r\n        )}\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Hospitals\r\n","/* global google */\r\nimport React, { useState, useEffect, useMemo, memo } from 'react'\r\nimport { useAppContext } from '../../utils/global';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Circle, DirectionsRenderer } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport WaitTime from '../waittime/waitTime';\r\n// import mapStyle from \"../assets/mapStyle\";\r\n// import { useCountContext } from \"../utils/GlobalState\";\r\nimport axios from 'axios';\r\nconst api = process.env.REACT_APP_GOOGLEMAP_API_KEY;\r\nGeocode.setApiKey(api);\r\nGeocode.enableDebug();\r\n\r\nconst GoogleMaps = () => {\r\n\r\n  // const [state, dispatch] = useCountContext();\r\n  const [hospitals, setHospitals] = useState([])\r\n  const [global, dispatch] = useAppContext();\r\n  const [directions, setDirection] = useState({})\r\n  const [mapPosition, setMapPosition] = useState({\r\n    lat: \"\",\r\n    lng: \"\"\r\n  });\r\n  const directionsService = new google.maps.DirectionsService();\r\n  useEffect(() => {\r\n    loadGeo();\r\n  }, [])\r\n  useEffect(() => {\r\n    loadHospitals();\r\n  }, [global.painLevel])\r\n  useEffect(() => {\r\n    const destination = global.destination;\r\n    const origin = global.location;\r\n    directionsService.route(\r\n      {\r\n        origin: origin,\r\n        destination: destination,\r\n        travelMode: google.maps.TravelMode.DRIVING\r\n      },\r\n      (result, status) => {\r\n        if (status === google.maps.DirectionsStatus.OK) {\r\n          console.log('logging direction result: ', result)\r\n          setDirection(result);\r\n        } else {\r\n          console.error(`error fetching directions ${result}`);\r\n        }\r\n      }\r\n    );\r\n  }, [global.destination]);\r\n\r\n\r\n\r\n  const loadHospitals = () => {\r\n    const url = process.env.REACT_APP_HOSPITALS_URL;\r\n    axios.get(url)\r\n      .then(res => setHospitals(res.data._embedded.hospitals))\r\n  }\r\n  const loadGeo = () => {\r\n    let lat = '';\r\n    let lng = '';\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        lat = position.coords.latitude;\r\n        lng = position.coords.longitude;\r\n        setMapPosition({ lat: lat, lng: lng });\r\n        Geocode.fromLatLng(lat, lng)\r\n          .then(res => { })\r\n      }, function error(msg) { alert('Please enable your GPS position feature.'); },\r\n        { maximumAge: 10000, timeout: 5000, enableHighAccuracy: true });\r\n    } else {\r\n      console.log(\"Geolocation privilege denied\");\r\n    }\r\n  }\r\n  const onMarkerDragEnd = (event) => {\r\n    const newLat = event.latLng.lat();\r\n    const newLng = event.latLng.lng();\r\n    setMapPosition({\r\n      lat: newLat,\r\n      lng: newLng\r\n    });\r\n    console.log(newLat, newLng);\r\n    Geocode.fromLatLng(newLat, newLng)\r\n      .then(res => {\r\n        dispatch({ type: 'location', location: { lat: newLat, lng: newLng } });\r\n        // const postcode = res.results[0].address_components[6].long_name;\r\n      })\r\n  }\r\n  const handleClose = (e) => {\r\n    dispatch({ type: 'closeMap' });\r\n    console.log(e.target)\r\n  }\r\n  const Map = memo(() => {\r\n    const [selectedHospital, setSelectedHospital] = useState({});\r\n    return (\r\n      <div>\r\n        <GoogleMap\r\n          defaultZoom={11}\r\n          defaultCenter={{\r\n            lat: mapPosition.lat,\r\n            lng: mapPosition.lng\r\n          }}\r\n          defaultOptions={{\r\n            disableDefaultUI: true,\r\n            controlSize: 21,\r\n          }}\r\n\r\n        >\r\n          <DirectionsRenderer directions={directions} />\r\n          <Marker\r\n            name={\"You're here\"}\r\n            draggable={true}\r\n            onDragEnd={onMarkerDragEnd}\r\n            position={{\r\n              lat: mapPosition.lat,\r\n              lng: mapPosition.lng\r\n            }\r\n            }\r\n            options={{ strokeColor: \"#FFD300\" }}\r\n          />\r\n          {hospitals ?\r\n            (hospitals.map(hospital => (\r\n              <Marker\r\n                key={hospital.id}\r\n                position={{ lat: hospital.location.lat, lng: hospital.location.lng }}\r\n                onClick={() => {\r\n                  setSelectedHospital(hospital);\r\n                }}\r\n              >\r\n                {selectedHospital && selectedHospital.id === hospital.id && (\r\n                  <InfoWindow\r\n                    onCloseClick={() => {\r\n                      setSelectedHospital(null)\r\n                    }}>\r\n                    <div className=\"infoWindow\">\r\n                      <p>{selectedHospital.name}</p>\r\n                      <p>Position in queue: {selectedHospital.waitingList[global.painLevel].patientCount} </p>\r\n                      <WaitTime painLevel={global.painLevel} hospital={hospital} />\r\n                    </div>\r\n                  </InfoWindow>\r\n                )} </Marker>\r\n            ))) : (\"\")}\r\n\r\n          <Circle\r\n            defaultCenter={{\r\n              lat: mapPosition.lat,\r\n              lng: mapPosition.lng\r\n            }}\r\n          // options={{ strokeColor: state.circleColor }}\r\n\r\n          // radius={state.radius}\r\n          />\r\n        </GoogleMap>\r\n      </div>\r\n    )\r\n  })\r\n  const WrappedMap = withScriptjs(withGoogleMap(Map));\r\n\r\n\r\n  return (\r\n    <div className={global.mobileMap ? 'map-container-mobile' : 'map-container'}>\r\n      <button className='close-map-button' onClick={handleClose} ><span className='fas fa-arrow-left' /> Back</button>\r\n      <WrappedMap\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${api}`}\r\n        loadingElement={<div style={{ 'height': `100%` }} />}\r\n        containerElement={<div style={{ 'height': `93%` }} />}\r\n        mapElement={<div style={{ 'height': `100%` }} />}\r\n      />\r\n      {/* <button onClick={() => { console.log('global: ', global.location, global.destination) }}>check global</button> */}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default GoogleMaps\r\n","import React from 'react'\r\nimport { useAppContext } from '../../utils/global';\r\nimport './slider.css';\r\n\r\nfunction Slider() {\r\n  const [global, dispatch] = useAppContext();\r\n  const colorArray = ['170', '115', '57', '22', '10'];\r\n  const classArray = ['noPain', 'mildPain', 'mediumPain', 'badPain', 'severePain']\r\n\r\n  const handleSlider = (e) => {\r\n    const value = parseInt(e.target.value);\r\n    dispatch({ type: 'pain', pain: value })\r\n  }\r\n\r\n  return (\r\n    <div className=\"sliderContainer\">\r\n      <input\r\n        className={classArray[global.painLevel]}\r\n        id=\"slider\"\r\n        type=\"range\"\r\n        name=\"slider\"\r\n        min=\"0\"\r\n        value={global.painLevel}\r\n        max=\"4\"\r\n        // style={{ \"background\": `${slider.color}` }}\r\n        onChange={handleSlider}\r\n        style={{ 'background': `hsla(${colorArray[global.painLevel]},100%,50%,1)` }}\r\n      />\r\n      <label>Pain Level</label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Slider\r\n","import React, { useEffect, useState } from 'react'\r\nimport Ills from '../../components/illnesses'\r\nimport Hospitals from '../../components/hospitals'\r\nimport GoogleMaps from '../../components/googleMap';\r\nimport Slider from '../../components/slider';\r\nimport { useAppContext } from '../../utils/global';\r\nimport './home.css';\r\n\r\nfunction Home() {\r\n\r\n  useEffect(() => { loadGeo(); }, []);\r\n  const [global, dispatch] = useAppContext();\r\n\r\n  const loadGeo = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        const lat = position.coords.latitude;\r\n        const lng = position.coords.longitude;\r\n        dispatch({ type: 'location', location: { lat, lng } });\r\n      }, function error(msg) { alert('Please enable your GPS position feature.'); },\r\n        { maximumAge: 10000, timeout: 5000, enableHighAccuracy: true });\r\n    } else {\r\n      console.log(\"Geolocation privilege denied\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='home-container'>\r\n      <div className={global.mobileMap ? 'left-container-mobile' : 'left-container'} >\r\n        <Ills />\r\n        <Hospitals />\r\n        <Slider />\r\n\r\n      </div>\r\n      <GoogleMaps />\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ContextProvider } from './utils/global';\nimport Admin from \"./pages/admin/\";\nimport Home from './pages/home/'\n\nfunction App() {\n  return (\n    <ContextProvider>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\"> <Home /></Route>\n          <Route exact path=\"/admin\"> <Admin /></Route>\n        </Switch>\n      </Router>\n    </ContextProvider>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}